前情回顾

1. 线程
   多任务编程
   运行过程   占有资源   共享进程资源
   一个进程可包含多个线程
   线程的创建比较容易

2. 创建线程
   Thread()  start()  join()

   属性   自定义线程类

3. 同步互斥

   Event() e.set() e.wait() e.clear()

   Lock()  lock.acquire()   lock.release()

   作用： 控制多个线程对共享资源的有序使用

   缺点 ： 影响效率， 会产生死锁

4. GIL ： 全局解释器锁

   后果 ： Python的多线程效率低

   使用情况建议：没阻塞时用进程
               高阻塞时才考虑线程